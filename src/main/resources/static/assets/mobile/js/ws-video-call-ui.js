/**
 * WebSocket Í∏∞Î∞ò ÏòÅÏÉÅÌÜµÌôî ÏãúÏä§ÌÖú - Í∞ÑÏÜåÌôîÎêú UI Í¥ÄÎ¶¨
 * ÌïµÏã¨ Í∏∞Îä•Îßå ÎÇ®Í∏∞Í≥† Î∂àÌïÑÏöîÌïú Í∏∞Îä• Ï†úÍ±∞
 */

// ========== DOM ÏöîÏÜå Ï∫êÏãú ==========
let domCache = {};

function cacheDOMElements() {
    domCache = {
        // Î™®Îã¨Îì§
        permissionModal: document.getElementById('permissionModal'),
        callStartModal: document.getElementById('callStartModal'),
        loadingModal: document.getElementById('loadingModal'),

        // ÏÉÅÌÉú ÌëúÏãú
        statusText: document.getElementById('statusText'),
        connectionStatus: document.getElementById('connectionStatus'),
        connectionIcon: document.getElementById('connectionIcon'),
        connectionText: document.getElementById('connectionText'),

        // ÎπÑÎîîÏò§
        mainVideo: document.getElementById('mainVideo'),
        myCamera: document.getElementById('myCamera'),
        cameraPlaceholder: document.getElementById('cameraPlaceholder'),
        videoLoadingOverlay: document.getElementById('videoLoadingOverlay'),

        // Ïª®Ìä∏Î°§
        recordBtn: document.getElementById('recordBtn'),
        recordIcon: document.getElementById('recordIcon')
    };

    WS_VIDEO_LOGGER.info('DOM ÏöîÏÜå Ï∫êÏãú ÏôÑÎ£å');
}

// ========== Í∞ÑÏÜåÌôîÎêú UI Îß§ÎãàÏ†Ä ==========
class SimpleWSVideoUIManager {
    constructor() {
        this.openModals = [];
        this.lastRecordingToggle = 0; // ÎÖπÌôî Î≤ÑÌäº Ï§ëÎ≥µ ÌÅ¥Î¶≠ Î∞©ÏßÄ
        this.recordingToggleThrottle = 2000;
        this.currentVideoUrl = null;
    }

    // === Î™®Îã¨ Í¥ÄÎ¶¨ (3Í∞úÎßå) ===
    showModal(modalElement) {
        if (!modalElement) return;
        modalElement.classList.add('show');
        this.openModals.push(modalElement.id);
    }

    hideModal(modalElement) {
        if (!modalElement) return;
        modalElement.classList.remove('show');
        const index = this.openModals.indexOf(modalElement.id);
        if (index > -1) this.openModals.splice(index, 1);
    }

    hideAllModals() {
        [domCache.permissionModal, domCache.callStartModal, domCache.loadingModal]
            .forEach(modal => modal && this.hideModal(modal));
        this.openModals = [];
    }

    // === Í∂åÌïú Î™®Îã¨ ===
    showPermissionModal() {
        this.showModal(domCache.permissionModal);
        this.updateStatus('Í∂åÌïú ÏöîÏ≤≠ Ï§ë...');
    }

    hidePermissionModal() {
        this.hideModal(domCache.permissionModal);
    }

    // === ÌÜµÌôî ÏãúÏûë Î™®Îã¨ ===
    showCallStartModal() {
        const contactName = WS_VIDEO_STATE.contactName || 'Ïó∞Í≤∞ Ï§ÄÎπÑ Ï§ë...';
        const display = document.getElementById('contactNameDisplay');
        if (display) display.textContent = contactName;

        this.showModal(domCache.callStartModal);
    }

    hideCallStartModal() {
        this.hideModal(domCache.callStartModal);
    }

    // === Î°úÎî© Î™®Îã¨ ===
    showLoadingModal(title = 'Ïó∞Í≤∞ Ï§ÄÎπÑ Ï§ë...', message = 'Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî') {
        const titleEl = document.getElementById('loadingTitle');
        const messageEl = document.getElementById('loadingMessage');

        if (titleEl) titleEl.textContent = title;
        if (messageEl) messageEl.textContent = message;

        this.showModal(domCache.loadingModal);
    }

    hideLoadingModal() {
        this.hideModal(domCache.loadingModal);
    }

    // === ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Í∞ÑÏÜåÌôî) ===
    updateStatus(newStatus, statusType = 'info') {
        if (!domCache.statusText) return;

        const statusConfig = {
            error: { color: '#e74c3c', icon: '‚ùå' },
            recording: { color: '#e74c3c', icon: 'üî¥' },
            success: { color: '#27ae60', icon: '‚úÖ' },
            loading: { color: '#f39c12', icon: '‚è≥' },
            processing: { color: '#3498db', icon: 'ü§ñ' },
            info: { color: '#3498db', icon: '' }
        };

        const config = statusConfig[statusType] || statusConfig.info;

        domCache.statusText.textContent = config.icon ? `${config.icon} ${newStatus}` : newStatus;
        domCache.statusText.style.color = config.color;

        // ÎÖπÌôî ÏÉÅÌÉúÏùº ÎïåÎßå ÍπúÎπ°ÏûÑ
        if (statusType === 'recording') {
            domCache.statusText.classList.add('recording-blink');
        } else {
            domCache.statusText.classList.remove('recording-blink');
        }

        WS_VIDEO_LOGGER.debug('ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏:', newStatus, statusType);
    }

    // === Ïó∞Í≤∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ===
    updateConnectionStatus(status) {
        if (!domCache.connectionStatus) return;

        const statusConfig = {
            connecting: { icon: 'fa-wifi', text: 'Ïó∞Í≤∞ Ï§ë...', color: '#f39c12' },
            connected: { icon: 'fa-wifi', text: 'Ïó∞Í≤∞Îê®', color: '#27ae60' },
            disconnected: { icon: 'fa-wifi-slash', text: 'Ïó∞Í≤∞ ÎÅäÍπÄ', color: '#e74c3c' },
            error: { icon: 'fa-exclamation-triangle', text: 'Ïó∞Í≤∞ Ïò§Î•ò', color: '#e74c3c' }
        };

        const config = statusConfig[status] || statusConfig.disconnected;

        if (domCache.connectionIcon) {
            domCache.connectionIcon.className = `fas ${config.icon}`;
            domCache.connectionIcon.style.color = config.color;
        }

        if (domCache.connectionText) {
            domCache.connectionText.textContent = config.text;
            domCache.connectionText.style.color = config.color;
        }

        // Î¨∏Ï†úÍ∞Ä ÏûàÎäî ÏÉÅÌÉúÎßå ÌëúÏãú
        if (status === 'connecting' || status === 'disconnected' || status === 'error') {
            domCache.connectionStatus.classList.add('show');
        } else {
            setTimeout(() => domCache.connectionStatus.classList.remove('show'), 2000);
        }
    }

    // === ÎÖπÌôî UI ÏóÖÎç∞Ïù¥Ìä∏ ===
    updateRecordingUI = function(isRecording) {
    if (!domCache.recordBtn || !domCache.recordIcon) return;

    if (isRecording) {
        domCache.recordBtn.classList.add('recording', 'user-stop-enabled');
        domCache.recordBtn.disabled = false; // üîß Ï§ëÏöî: ÎÖπÌôî Ï§ëÏóêÎèÑ Î≤ÑÌäº ÌôúÏÑ±Ìôî (Ï§ëÏßÄÏö©)
        domCache.recordIcon.className = 'fas fa-stop';
        document.body.classList.add('recording-active');

        domCache.recordBtn.title = 'ÎÖπÌôî Ï§ëÏßÄÌïòÍ∏∞ (ÌÅ¥Î¶≠ÌïòÏó¨ Ï§ëÏßÄ)';

        // üÜï Ï§ëÏßÄ Í∞ÄÎä• ÏãúÍ∞ÅÏ†Å ÌëúÏãú Ï∂îÍ∞Ä
        domCache.recordBtn.style.background = 'linear-gradient(45deg, #e74c3c, #c0392b)';
        domCache.recordBtn.style.animation = 'recordingPulse 2s ease-in-out infinite';

    } else {
        domCache.recordBtn.classList.remove('recording', 'user-stop-enabled');
        domCache.recordIcon.className = 'fas fa-microphone';
        document.body.classList.remove('recording-active');

        // Ïä§ÌÉÄÏùº Ï¥àÍ∏∞Ìôî
        domCache.recordBtn.style.background = '';
        domCache.recordBtn.style.animation = '';

        // ÎÖπÌôî Í∞ÄÎä• Ïó¨Î∂ÄÏóê Îî∞Îùº Î≤ÑÌäº ÌôúÏÑ±Ìôî
        setTimeout(() => {
            const canRecord = WS_VIDEO_STATE_UTILS?.canRecord() || false;
            domCache.recordBtn.disabled = !canRecord;
            domCache.recordBtn.classList.toggle('disabled', !canRecord);
            domCache.recordBtn.title = canRecord ? 'ÎÖπÌôîÌïòÍ∏∞' : 'ÎÖπÌôîÌï† Ïàò ÏóÜÏäµÎãàÎã§';
        }, 500); // 0.5Ï¥à ÌõÑ Î≤ÑÌäº ÏÉÅÌÉú ÌôïÏù∏
    }
};

    // === ÏòÅÏÉÅ Î°úÎî© Ïò§Î≤ÑÎ†àÏù¥ ===
    showVideoLoadingOverlay() {
        if (domCache.videoLoadingOverlay) {
            // üîß PROCESSING ÏÉÅÌÉúÍ∞Ä ÏïÑÎãê ÎïåÎßå Ïò§Î≤ÑÎ†àÏù¥ ÌëúÏãú
            const currentState = WS_VIDEO_STATE_UTILS?.getCurrentState();
            if (currentState?.name !== 'PROCESSING') {
                domCache.videoLoadingOverlay.classList.add('show');
                WS_VIDEO_LOGGER.debug('üì∫ ÎπÑÎîîÏò§ Î°úÎî© Ïò§Î≤ÑÎ†àÏù¥ ÌëúÏãú');
            }
        }
    }

    hideVideoLoadingOverlay() {
        if (domCache.videoLoadingOverlay) {
            domCache.videoLoadingOverlay.classList.remove('show');
            WS_VIDEO_LOGGER.debug('üì∫ ÎπÑÎîîÏò§ Î°úÎî© Ïò§Î≤ÑÎ†àÏù¥ Ïà®ÍπÄ');
        }
    }

    // === ÏòÅÏÉÅ Ï†ÑÌôò Î°úÏßÅ (OSÎ≥Ñ ÏµúÏ†ÅÌôî) ===
    async fadeOutVideo() {
        if (!domCache.mainVideo) return;

        const browserInfo = getBrowserInfo();
        // iOS SafariÎäî ÌéòÏù¥Îìú Ìö®Í≥º Ïä§ÌÇµ (ÏÑ±Îä•ÏÉÅ Ïù¥Ïú†)
        if (browserInfo?.isIOSSafari) return;

        domCache.mainVideo.style.transition = 'opacity 0.3s ease';
        domCache.mainVideo.style.opacity = '0';
        await new Promise(resolve => setTimeout(resolve, 300));
    }

    async fadeInVideo() {
        if (!domCache.mainVideo) return;

        const browserInfo = getBrowserInfo();
        if (browserInfo?.isIOSSafari) return;

        domCache.mainVideo.style.transition = 'opacity 0.3s ease';
        domCache.mainVideo.style.opacity = '1';
        await new Promise(resolve => setTimeout(resolve, 300));
        domCache.mainVideo.style.transition = '';
    }

    // OSÎ≥Ñ ÏïàÏ†ÑÌïú ÏòÅÏÉÅ ÍµêÏ≤¥
    async switchVideoSafely(newUrl, loop = false, unmuted = false) {
        if (!domCache.mainVideo || !newUrl) return false;

        try {
            this.showVideoLoadingOverlay();

            return new Promise((resolve, reject) => {
                const cleanup = () => {
                    domCache.mainVideo.removeEventListener('loadedmetadata', onLoaded);
                    domCache.mainVideo.removeEventListener('error', onError);
                    if (timeout) clearTimeout(timeout);
                    this.hideVideoLoadingOverlay();
                };

                const onLoaded = async () => {
                    try {
                        cleanup();
                        await domCache.mainVideo.play();
                        domCache.mainVideo.style.display = 'block';
                        WS_VIDEO_LOGGER.info('ÏòÅÏÉÅ ÍµêÏ≤¥ ÏÑ±Í≥µ:', newUrl);
                        resolve(true);
                    } catch (playError) {
                        if (playError.name === 'NotAllowedError') {
                            this.showTouchToPlayGuide(resolve, reject);
                        } else {
                            WS_VIDEO_LOGGER.error('ÏòÅÏÉÅ Ïû¨ÏÉù Ïã§Ìå®:', playError);
                            reject(playError);
                        }
                    }
                };

                const onError = () => {
                    cleanup();
                    WS_VIDEO_LOGGER.error('ÏòÅÏÉÅ Î°úÎî© Ïã§Ìå®:', newUrl);
                    reject(new Error('ÏòÅÏÉÅ Î°úÎî© Ïã§Ìå®'));
                };

                // ÏòÅÏÉÅ ÏÑ§Ï†ï
                domCache.mainVideo.src = newUrl;
                domCache.mainVideo.loop = loop;
                domCache.mainVideo.muted = !unmuted;
                domCache.mainVideo.playsInline = true;

                if (unmuted) {
                    domCache.mainVideo.volume = 0.8;
                }

                domCache.mainVideo.addEventListener('loadedmetadata', onLoaded);
                domCache.mainVideo.addEventListener('error', onError);

                // ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
                const timeout = setTimeout(() => {
                    cleanup();
                    reject(new Error('ÏòÅÏÉÅ Î°úÎî© ÌÉÄÏûÑÏïÑÏõÉ'));
                }, WS_VIDEO_CONFIG?.TIMERS?.VIDEO_LOAD_TIMEOUT || 15000);

                // OSÎ≥Ñ Î°úÎìú Î∞©Ïãù
                const browserInfo = getBrowserInfo();
                if (browserInfo?.isIOSSafari || browserInfo?.isAndroid) {
                    // iOS/AndroidÎäî Î™ÖÏãúÏ†Å load() Ìò∏Ï∂ú ÌïÑÏöî
                    domCache.mainVideo.load();
                    WS_VIDEO_LOGGER.debug('iOS/Android - Î™ÖÏãúÏ†Å load() Ìò∏Ï∂ú');
                } else {
                    // ÏùºÎ∞ò Î∏åÎùºÏö∞Ï†ÄÎäî src ÏÑ§Ï†ïÎßåÏúºÎ°úÎèÑ Î°úÎî© ÏãúÏûë
                    WS_VIDEO_LOGGER.debug('Îç∞Ïä§ÌÅ¨ÌÜ± Î∏åÎùºÏö∞Ï†Ä - ÏûêÎèô Î°úÎî©');
                }
            });

        } catch (error) {
            this.hideVideoLoadingOverlay();
            WS_VIDEO_LOGGER.error('ÏòÅÏÉÅ ÍµêÏ≤¥ Ïã§Ìå®:', error);
            return false;
        }
    }

    // ÌÑ∞ÏπòÌïòÏó¨ Ïû¨ÏÉù Í∞ÄÏù¥Îìú (iOSÏö©)
    showTouchToPlayGuide(resolve, reject, loop = true, unmuted = false) {
        // Í∏∞Ï°¥ Í∞ÄÏù¥Îìú Ï†úÍ±∞
        const existingGuide = document.getElementById('touchGuide');
        if (existingGuide) {
            existingGuide.remove();
        }

        const guide = document.createElement('div');
        guide.id = 'touchGuide';
        guide.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.85);
            color: white;
            padding: 32px;
            border-radius: 16px;
            text-align: center;
            z-index: 2500;
            cursor: pointer;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
        `;

        guide.innerHTML = `
            <div style="font-size: 64px; margin-bottom: 20px;">üé¨</div>
            <div style="font-size: 20px; font-weight: 600; margin-bottom: 12px;">ÌôîÎ©¥ÏùÑ ÌÑ∞ÏπòÌï¥Ï£ºÏÑ∏Ïöî</div>
            <div style="font-size: 14px; opacity: 0.8;">
                ${unmuted ? 'ÏÜåÎ¶¨ÏôÄ Ìï®Íªò ' : ''}ÏòÅÏÉÅÏùÑ ÏãúÏûëÌïòÎ†§Î©¥ ÌÑ∞ÏπòÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§
            </div>
        `;

        // üîß ÌïµÏã¨: ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏ÏóêÏÑú ÏòÅÏÉÅ Ïû¨ÏÉù (ÏÑ±Í≥µ ÏºÄÏù¥Ïä§ Î∞©Ïãù)
        guide.onclick = async () => {
            try {
                const mainVideo = document.getElementById('mainVideo');

                // üîß Ï§ëÏöî: ÌÑ∞Ïπò ÏãúÏ†êÏóêÏÑú ÏòÅÏÉÅ ÏÑ§Ï†ï ÏµúÏ¢Ö ÌôïÏù∏
                mainVideo.loop = loop;
                mainVideo.muted = !unmuted;
                mainVideo.playsInline = true; // Î™®Î∞îÏùº ÌïÑÏàò

                if (unmuted) {
                    mainVideo.volume = 0.8;
                }

                // üîß ÏÇ¨Ïö©Ïûê ÌÑ∞Ïπò ÌõÑ Ïû¨ÏÉù (ÏÑ±Í≥µ Ìå®ÌÑ¥)
                await mainVideo.play();

                guide.remove();
                mainVideo.style.display = 'block';

                WS_VIDEO_LOGGER.info('‚úÖ ÏÇ¨Ïö©Ïûê ÌÑ∞ÏπòÎ°ú ÏòÅÏÉÅ Ïû¨ÏÉù ÏãúÏûë (Android/iOS)');
                WS_VIDEO_LOGGER.info('üîä Ïò§ÎîîÏò§ ÏÉÅÌÉú:', {
                    muted: mainVideo.muted,
                    volume: mainVideo.volume,
                    loop: mainVideo.loop,
                    src: mainVideo.src
                });

                resolve(true);

            } catch (error) {
                guide.remove();
                WS_VIDEO_LOGGER.error('‚ùå ÌÑ∞Ïπò Í∞ÄÏù¥Îìú Ïû¨ÏÉù Ïã§Ìå®:', error);
                reject(error);
            }
        };

        // Ïª®ÌÖåÏù¥ÎÑàÏóê Ï∂îÍ∞Ä
        document.querySelector('.main-video-container').appendChild(guide);

        // 15Ï¥à ÌõÑ ÏûêÎèô Ï†úÍ±∞ (Ï°∞Í∏à Îçî Ïó¨Ïú†ÏûàÍ≤å)
        setTimeout(() => {
            if (guide.parentNode) {
                guide.remove();
                reject(new Error('ÏÇ¨Ïö©Ïûê ÌÑ∞Ïπò ÌÉÄÏûÑÏïÑÏõÉ'));
            }
        }, 15000);

        WS_VIDEO_LOGGER.info('üì± ÌÑ∞Ïπò Í∞ÄÏù¥Îìú ÌëúÏãúÎê® (Î™®Îì† ÌîåÎû´Ìèº ÎåÄÏùë)');
    }

    // Î∂ÄÎìúÎü¨Ïö¥ ÏòÅÏÉÅ Ï†ÑÌôò (ÎåÄÍ∏∞ÏòÅÏÉÅ ‚Üî ÏùëÎãµÏòÅÏÉÅ)
    async transitionVideo(newUrl, loop = false, unmuted = false) {
        try {
            WS_VIDEO_LOGGER.info('üé¨ ÏòÅÏÉÅ Ï†ÑÌôò ÏãúÏûë:', newUrl);

            // üîß ÎèôÏùºÌïú URLÏù∏ Í≤ΩÏö∞ Ïä§ÌÇµ
            if (this.currentVideoUrl === newUrl) {
                WS_VIDEO_LOGGER.info('üìù ÎèôÏùºÌïú URL - Ï†ÑÌôò Ïä§ÌÇµ');
                return true;
            }

            const browserInfo = getBrowserInfo();
            let success = false;

            // üîß OSÎ≥Ñ ÏòÅÏÉÅ ÍµêÏ≤¥ Î∞©Ïãù ÏÑ†ÌÉù
            if (browserInfo?.isIOSSafari) {
                success = await this.switchVideoForIOS(newUrl, loop, unmuted);
            } else if (browserInfo?.isAndroid) {
                success = await this.switchVideoForAndroid(newUrl, loop, unmuted);
            } else {
                success = await this.switchVideoForDesktop(newUrl, loop, unmuted);
            }

            if (success) {
                this.currentVideoUrl = newUrl;
                WS_VIDEO_LOGGER.info('‚úÖ ÏòÅÏÉÅ Ï†ÑÌôò ÏôÑÎ£å:', newUrl);

                // ÏùëÎãµÏòÅÏÉÅÏù¥Í≥† ÏûêÎèô Î≥µÍ∑ÄÍ∞Ä ÌïÑÏöîÌïú Í≤ΩÏö∞
                if (!loop && unmuted) {
                    this.setupAutoReturnToWaiting();
                }

                return true;
            } else {
                WS_VIDEO_LOGGER.error('‚ùå ÏòÅÏÉÅ Ï†ÑÌôò Ïã§Ìå® - ÎåÄÍ∏∞ÏòÅÏÉÅÏúºÎ°ú Î≥µÍ∑Ä');
                await this.returnToWaitingVideo();
                return false;
            }

        } catch (error) {
            WS_VIDEO_LOGGER.error('‚ùå ÏòÅÏÉÅ Ï†ÑÌôò Ï§ë Ïò§Î•ò:', error);
            await this.returnToWaitingVideo();
            return false;
        }
    }

    async switchVideoForIOS(newUrl, loop = false, unmuted = false) {
        WS_VIDEO_LOGGER.info('üçé iOS Safari ÏòÅÏÉÅ ÍµêÏ≤¥ ÏãúÏûë');

        const mainVideo = document.getElementById('mainVideo');
        if (!mainVideo) return false;

        try {
            this.showVideoLoadingOverlay();

            return new Promise((resolve, reject) => {
                const cleanup = () => {
                    mainVideo.removeEventListener('loadeddata', onLoaded);
                    mainVideo.removeEventListener('error', onError);
                    if (timeout) clearTimeout(timeout);
                    this.hideVideoLoadingOverlay();
                };

                const onLoaded = async () => {
                    try {
                        cleanup();

                        // iOS SafariÎäî Î™ÖÏãúÏ†ÅÏúºÎ°ú load() ÌõÑ play() Ìò∏Ï∂ú ÌïÑÏöî
                        mainVideo.load();
                        await mainVideo.play();

                        mainVideo.style.display = 'block';
                        WS_VIDEO_LOGGER.info('‚úÖ iOS Safari ÏòÅÏÉÅ Ïû¨ÏÉù ÏÑ±Í≥µ');
                        resolve(true);
                    } catch (playError) {
                        WS_VIDEO_LOGGER.error('‚ùå iOS Safari Ïû¨ÏÉù Ïã§Ìå®:', playError);
                        if (playError.name === 'NotAllowedError') {
                            this.showTouchToPlayGuide(resolve, reject);
                        } else {
                            reject(playError);
                        }
                    }
                };

                const onError = () => {
                    cleanup();
                    WS_VIDEO_LOGGER.error('‚ùå iOS Safari ÏòÅÏÉÅ Î°úÎî© Ïã§Ìå®:', newUrl);
                    reject(new Error('iOS Safari ÏòÅÏÉÅ Î°úÎî© Ïã§Ìå®'));
                };

                // iOS Safari ÏÑ§Ï†ï (Ï§ëÏöî!)
                mainVideo.src = newUrl;
                mainVideo.loop = loop;
                mainVideo.muted = !unmuted;
                mainVideo.playsInline = true; // iOS ÌïÑÏàò
                mainVideo.autoplay = true;

                if (unmuted) {
                    mainVideo.volume = 0.8;
                }

                mainVideo.addEventListener('loadeddata', onLoaded); // iOSÎäî loadeddata Ïù¥Î≤§Ìä∏ ÏÇ¨Ïö©
                mainVideo.addEventListener('error', onError);

                // ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
                const timeout = setTimeout(() => {
                    cleanup();
                    reject(new Error('iOS Safari ÏòÅÏÉÅ Î°úÎî© ÌÉÄÏûÑÏïÑÏõÉ'));
                }, 10000); // iOSÎäî Îçî ÏßßÏùÄ ÌÉÄÏûÑÏïÑÏõÉ

                // iOS SafariÎäî Î∞òÎìúÏãú load() Ìò∏Ï∂ú
                mainVideo.load();
                WS_VIDEO_LOGGER.info('üçé iOS Safari load() Ìò∏Ï∂ú ÏôÑÎ£å');
            });

        } catch (error) {
            this.hideVideoLoadingOverlay();
            WS_VIDEO_LOGGER.error('‚ùå iOS Safari ÏòÅÏÉÅ ÍµêÏ≤¥ Ïã§Ìå®:', error);
            return false;
        }
    }

    async switchVideoForAndroid(newUrl, loop = false, unmuted = false) {
        WS_VIDEO_LOGGER.info('ü§ñ Android ÏòÅÏÉÅ ÍµêÏ≤¥ ÏãúÏûë');

        const mainVideo = document.getElementById('mainVideo');
        if (!mainVideo) return false;

        try {
            // AndroidÎäî Î∂ÄÎìúÎü¨Ïö¥ Ï†ÑÌôò ÏÇ¨Ïö©
            await this.fadeOutVideo();

            return new Promise((resolve, reject) => {
                const cleanup = () => {
                    mainVideo.removeEventListener('canplay', onCanPlay);
                    mainVideo.removeEventListener('error', onError);
                    if (timeout) clearTimeout(timeout);
                };

                const onCanPlay = async () => {
                    try {
                        cleanup();
                        await mainVideo.play();
                        await this.fadeInVideo();

                        WS_VIDEO_LOGGER.info('‚úÖ Android ÏòÅÏÉÅ Ïû¨ÏÉù ÏÑ±Í≥µ');
                        resolve(true);
                    } catch (playError) {
                        WS_VIDEO_LOGGER.error('‚ùå Android Ïû¨ÏÉù Ïã§Ìå®:', playError);

                        // üîß AndroidÎèÑ NotAllowedError Ï≤òÎ¶¨ Ï∂îÍ∞Ä
                        if (playError.name === 'NotAllowedError') {
                            WS_VIDEO_LOGGER.info('ü§ñ Android - ÏÇ¨Ïö©Ïûê ÌÑ∞Ïπò ÌïÑÏöî');
                            this.showTouchToPlayGuide(resolve, reject, loop, unmuted);
                        } else {
                            reject(playError);
                        }
                    }
                };

                const onError = () => {
                    cleanup();
                    WS_VIDEO_LOGGER.error('‚ùå Android ÏòÅÏÉÅ Î°úÎî© Ïã§Ìå®:', newUrl);
                    reject(new Error('Android ÏòÅÏÉÅ Î°úÎî© Ïã§Ìå®'));
                };

                // Android ÏÑ§Ï†ï
                mainVideo.src = newUrl;
                mainVideo.loop = loop;
                mainVideo.muted = !unmuted;  // üîß Ï§ëÏöî: unmuted=trueÎ©¥ ÏÜåÎ¶¨ ÌôúÏÑ±Ìôî
                mainVideo.playsInline = true;

                if (unmuted) {
                    mainVideo.volume = 0.8;  // üîß ÏÜåÎ¶¨ Î≥ºÎ•® ÏÑ§Ï†ï
                }

                mainVideo.addEventListener('canplay', onCanPlay);
                mainVideo.addEventListener('error', onError);

                // ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
                const timeout = setTimeout(() => {
                    cleanup();
                    reject(new Error('Android ÏòÅÏÉÅ Î°úÎî© ÌÉÄÏûÑÏïÑÏõÉ'));
                }, 15000);

                // AndroidÎäî ÏûêÎèô Î°úÎî©
                WS_VIDEO_LOGGER.info('ü§ñ Android ÏûêÎèô Î°úÎî© ÏãúÏûë');
            });

        } catch (error) {
            WS_VIDEO_LOGGER.error('‚ùå Android ÏòÅÏÉÅ ÍµêÏ≤¥ Ïã§Ìå®:', error);
            return false;
        }
    }

    async switchVideoForDesktop(newUrl, loop = false, unmuted = false) {
        WS_VIDEO_LOGGER.info('üñ•Ô∏è Îç∞Ïä§ÌÅ¨ÌÜ± ÏòÅÏÉÅ ÍµêÏ≤¥ ÏãúÏûë');

        const mainVideo = document.getElementById('mainVideo');
        if (!mainVideo) return false;

        try {
            await this.fadeOutVideo();

            return new Promise((resolve, reject) => {
                const cleanup = () => {
                    mainVideo.removeEventListener('loadedmetadata', onLoaded);
                    mainVideo.removeEventListener('error', onError);
                    if (timeout) clearTimeout(timeout);
                };

                const onLoaded = async () => {
                    try {
                        cleanup();
                        await mainVideo.play();
                        await this.fadeInVideo();

                        WS_VIDEO_LOGGER.info('‚úÖ Îç∞Ïä§ÌÅ¨ÌÜ± ÏòÅÏÉÅ Ïû¨ÏÉù ÏÑ±Í≥µ');
                        resolve(true);
                    } catch (playError) {
                        WS_VIDEO_LOGGER.error('‚ùå Îç∞Ïä§ÌÅ¨ÌÜ± Ïû¨ÏÉù Ïã§Ìå®:', playError);
                        reject(playError);
                    }
                };

                const onError = () => {
                    cleanup();
                    WS_VIDEO_LOGGER.error('‚ùå Îç∞Ïä§ÌÅ¨ÌÜ± ÏòÅÏÉÅ Î°úÎî© Ïã§Ìå®:', newUrl);
                    reject(new Error('Îç∞Ïä§ÌÅ¨ÌÜ± ÏòÅÏÉÅ Î°úÎî© Ïã§Ìå®'));
                };

                // Îç∞Ïä§ÌÅ¨ÌÜ± ÏÑ§Ï†ï
                mainVideo.src = newUrl;
                mainVideo.loop = loop;
                mainVideo.muted = !unmuted;
                mainVideo.playsInline = true;

                if (unmuted) {
                    mainVideo.volume = 0.8;
                }

                mainVideo.addEventListener('loadedmetadata', onLoaded);
                mainVideo.addEventListener('error', onError);

                // ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
                const timeout = setTimeout(() => {
                    cleanup();
                    reject(new Error('Îç∞Ïä§ÌÅ¨ÌÜ± ÏòÅÏÉÅ Î°úÎî© ÌÉÄÏûÑÏïÑÏõÉ'));
                }, 15000);

                WS_VIDEO_LOGGER.info('üñ•Ô∏è Îç∞Ïä§ÌÅ¨ÌÜ± ÏûêÎèô Î°úÎî© ÏãúÏûë');
            });

        } catch (error) {
            WS_VIDEO_LOGGER.error('‚ùå Îç∞Ïä§ÌÅ¨ÌÜ± ÏòÅÏÉÅ ÍµêÏ≤¥ Ïã§Ìå®:', error);
            return false;
        }
    }

    // ÏùëÎãµÏòÅÏÉÅ Ï¢ÖÎ£å ÌõÑ ÎåÄÍ∏∞ÏòÅÏÉÅ ÏûêÎèô Î≥µÍ∑Ä
    setupAutoReturnToWaiting() {
        const mainVideo = document.getElementById('mainVideo');
        if (!mainVideo) return;

        const onVideoEnded = async () => {
            WS_VIDEO_LOGGER.info('üì∫ ÏùëÎãµÏòÅÏÉÅ Ï¢ÖÎ£å - ÎåÄÍ∏∞ÏòÅÏÉÅÏúºÎ°ú Î≥µÍ∑Ä');
            mainVideo.removeEventListener('ended', onVideoEnded);

            // WebSocket ÏïåÎ¶º
            if (wsVideoClient) {
                wsVideoClient.notifyResponseVideoEvent('ended', {
                    duration: Math.floor(mainVideo.currentTime)
                });
            }

            // üîß Ï¶âÏãú Î≥µÍ∑ÄÌïòÏßÄ ÏïäÍ≥† 0.5Ï¥à ÎåÄÍ∏∞ (ÏûêÏó∞Ïä§Îü¨Ïö¥ Ï†ÑÌôò)
            setTimeout(async () => {
                await this.returnToWaitingVideo();
            }, 500);
        };

        mainVideo.addEventListener('ended', onVideoEnded);

        // üîß Ï∂îÍ∞Ä ÏïàÏ†ÑÏû•Ïπò: ÏòÅÏÉÅÏù¥ 10Ï¥à Ïù¥ÏÉÅ Ïû¨ÏÉùÎêòÏßÄ ÏïäÏúºÎ©¥ Í∞ïÏ†ú Î≥µÍ∑Ä
        setTimeout(() => {
            if (mainVideo.currentTime === 0 || mainVideo.paused) {
                WS_VIDEO_LOGGER.warn('‚ö†Ô∏è ÏùëÎãµÏòÅÏÉÅÏù¥ Ïû¨ÏÉùÎêòÏßÄ ÏïäÏùå - Í∞ïÏ†ú Î≥µÍ∑Ä');
                onVideoEnded();
            }
        }, 10000);
    }

    // ÎåÄÍ∏∞ÏòÅÏÉÅÏúºÎ°ú Î≥µÍ∑Ä
    async returnToWaitingVideo() {
        if (!WS_VIDEO_STATE.waitingVideoUrl) {
            WS_VIDEO_LOGGER.warn('‚ö†Ô∏è ÎåÄÍ∏∞ÏòÅÏÉÅ URLÏù¥ ÏóÜÏñ¥ Î≥µÍ∑Ä Î∂àÍ∞Ä');
            return;
        }

        try {
            WS_VIDEO_LOGGER.info('üîÑ ÎåÄÍ∏∞ÏòÅÏÉÅÏúºÎ°ú Î≥µÍ∑Ä ÏãúÏûë');
            updateStatus('ÎåÄÍ∏∞ÏòÅÏÉÅÏúºÎ°ú Î≥µÍ∑Ä Ï§ë...');

            const success = await this.transitionVideo(WS_VIDEO_STATE.waitingVideoUrl, true, true);

            if (success) {
                updateStatus('ÎåÄÍ∏∞ Ï§ë');
                WS_VIDEO_LOGGER.info('‚úÖ ÎåÄÍ∏∞ÏòÅÏÉÅ Î≥µÍ∑Ä ÏôÑÎ£å');
            } else {
                WS_VIDEO_LOGGER.error('‚ùå ÎåÄÍ∏∞ÏòÅÏÉÅ Î≥µÍ∑Ä Ïã§Ìå®');
                updateStatus('ÏòÅÏÉÅ Ïò§Î•ò');
            }

        } catch (error) {
            WS_VIDEO_LOGGER.error('‚ùå ÎåÄÍ∏∞ÏòÅÏÉÅ Î≥µÍ∑Ä Ïã§Ìå®', error);
            updateStatus('ÏòÅÏÉÅ Ïò§Î•ò');
        }
    }

    // === Í∞ÑÎã®Ìïú ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ ===
    showMessage(message, type = 'info', duration = 3000) {
        const toast = document.createElement('div');
        toast.className = `message-toast message-${type}`;
        toast.textContent = message;

        const colors = {
            info: '#3498db',
            success: '#27ae60',
            error: '#e74c3c',
            warning: '#f39c12'
        };

        toast.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: ${colors[type] || colors.info};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 14px;
            text-align: center;
            z-index: 3000;
            max-width: 80%;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            animation: fadeInOut ${duration}ms ease-in-out;
        `;

        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), duration);
    }

    // === Ï¥àÍ∏∞Ìôî ===
    initialize() {
        cacheDOMElements();
        this.addBasicStyles();
        WS_VIDEO_LOGGER.info('Í∞ÑÏÜåÌôîÎêú UI Îß§ÎãàÏ†Ä Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }

    // === Í∏∞Î≥∏ Ïï†ÎãàÎ©îÏù¥ÏÖò Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä ===
    addBasicStyles = function() {
    if (document.getElementById('ws-video-basic-styles')) return;

    const style = document.createElement('style');
        style.id = 'ws-video-basic-styles';
        style.textContent = `
            .recording-blink {
                animation: recordingBlink 1s ease-in-out infinite;
            }
            
            @keyframes recordingBlink {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.3; }
            }
            
            .recording-active::before {
                content: '';
                position: fixed;
                top: 0; left: 0; right: 0; bottom: 0;
                border: 3px solid #e74c3c;
                pointer-events: none;
                z-index: 1000;
                animation: recordingBorder 2s ease-in-out infinite;
            }
            
            @keyframes recordingBorder {
                0%, 100% { opacity: 0.8; }
                50% { opacity: 0.3; }
            }
            
            @keyframes fadeInOut {
                0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
                20% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
            }
    
            /* üÜï ÎÖπÌôî Î≤ÑÌäº Ïï†ÎãàÎ©îÏù¥ÏÖò */
            @keyframes recordingPulse {
                0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(231, 76, 60, 0.7); }
                50% { transform: scale(1.05); box-shadow: 0 0 0 10px rgba(231, 76, 60, 0); }
                100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(231, 76, 60, 0); }
            }
    
            /* üÜï ÏÇ¨Ïö©Ïûê Ï§ëÏßÄ Í∞ÄÎä• Î≤ÑÌäº Ïä§ÌÉÄÏùº */
            .control-btn.user-stop-enabled {
                cursor: pointer !important;
                transition: all 0.3s ease;
            }
    
            .control-btn.user-stop-enabled:hover {
                transform: scale(1.1);
                box-shadow: 0 4px 15px rgba(231, 76, 60, 0.4);
            }
    
            .control-btn.user-stop-enabled::after {
                content: "Ï§ëÏßÄ";
                position: absolute;
                bottom: -25px;
                left: 50%;
                transform: translateX(-50%);
                font-size: 10px;
                color: #e74c3c;
                font-weight: bold;
            }
        `;

        document.head.appendChild(style);
    };
}

// ========== Ï†ÑÏó≠ UI Îß§ÎãàÏ†Ä Ïù∏Ïä§ÌÑ¥Ïä§ ==========
window.wsVideoUIManager = new SimpleWSVideoUIManager();

// ========== Ï†ÑÏó≠ Ìï®ÏàòÎì§ (Í∞ÑÏÜåÌôî) ==========
window.showPermissionModal = () => wsVideoUIManager.showPermissionModal();
window.hidePermissionModal = () => wsVideoUIManager.hidePermissionModal();
window.showCallStartModal = () => {
    const contactName = WS_VIDEO_STATE.contactName || 'Ïó∞Í≤∞ Ï§ÄÎπÑ Ï§ë...';
    const display = document.getElementById('contactNameDisplay');
    if (display) display.textContent = contactName;

    // üîß Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    setTimeout(() => {
        updateCallStartModal();
    }, 100); // DOM ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ Ïã§Ìñâ

    wsVideoUIManager.showCallStartModal();
};
window.hideCallStartModal = () => wsVideoUIManager.hideCallStartModal();
window.showLoadingModal = (title, message) => wsVideoUIManager.showLoadingModal(title, message);
window.hideLoadingModal = () => wsVideoUIManager.hideLoadingModal();

window.updateStatus = (status, type) => wsVideoUIManager.updateStatus(status, type);
window.updateConnectionStatus = (status) => wsVideoUIManager.updateConnectionStatus(status);
window.updateRecordingUI = (isRecording) => wsVideoUIManager.updateRecordingUI(isRecording);

window.showVideoLoadingOverlay = () => wsVideoUIManager.showVideoLoadingOverlay();
window.hideVideoLoadingOverlay = () => wsVideoUIManager.hideVideoLoadingOverlay();

// ÏòÅÏÉÅ Ï†ÑÌôò Í¥ÄÎ†® Ï†ÑÏó≠ Ìï®ÏàòÎì§ Ï∂îÍ∞Ä
window.playWaitingVideo = (url, loop = true) => {
    // üîß Ï§ëÏöî: ÎåÄÍ∏∞ÏòÅÏÉÅÏùÄ Ìï≠ÏÉÅ ÏÜåÎ¶¨ ÌôúÏÑ±Ìôî
    return wsVideoUIManager.transitionVideo(url, loop, true);  // unmuted=true
};
window.playResponseVideo = (url, autoReturn = true) => {
    // üîß Ï§ëÏöî: ÏùëÎãµÏòÅÏÉÅÎèÑ ÏÜåÎ¶¨ ÌôúÏÑ±Ìôî
    return wsVideoUIManager.transitionVideo(url, false, true);  // unmuted=true
};
window.switchVideoSafely = (url, loop, unmuted) => wsVideoUIManager.switchVideoSafely(url, loop, unmuted);

window.showSuccessMessage = (message) => wsVideoUIManager.showMessage(message, 'success');
window.showErrorMessage = (message) => wsVideoUIManager.showMessage(message, 'error');
window.showWarningMessage = (message) => wsVideoUIManager.showMessage(message, 'warning');
window.showInfoMessage = (message) => wsVideoUIManager.showMessage(message, 'info');

// ========== Î≤ÑÌäº Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ (Í∞ÑÏÜåÌôî) ==========
window.toggleRecording = async function() {
    try {
        // Ï§ëÎ≥µ ÌÅ¥Î¶≠ Î∞©ÏßÄ
        const now = Date.now();
        if (now - wsVideoUIManager.lastRecordingToggle < wsVideoUIManager.recordingToggleThrottle) {
            WS_VIDEO_LOGGER.warn('ÎÖπÌôî Î≤ÑÌäº Ï§ëÎ≥µ ÌÅ¥Î¶≠ Î∞©ÏßÄ - throttle Ï†ÅÏö©');
            showWarningMessage('Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî');
            return;
        }
        wsVideoUIManager.lastRecordingToggle = now;

        // üîß ÌòÑÏû¨ ÎÖπÌôî Ï§ëÏù∏ÏßÄ ÌôïÏù∏ÌïòÏó¨ ÏãúÏûë/Ï§ëÏßÄ Í≤∞Ï†ï
        if (WS_VIDEO_STATE.isRecording || wsVideoRecordingManager?.isRecording) {
            // ÎÖπÌôî Ï§ëÏù¥Î©¥ Ï§ëÏßÄ (ÏóÖÎ°úÎìú ÏßÑÌñâ)
            WS_VIDEO_LOGGER.info('üõë ÏÇ¨Ïö©Ïûê ÏöîÏ≤≠ÏúºÎ°ú ÎÖπÌôî Ï§ëÏßÄ - ÏóÖÎ°úÎìú ÏßÑÌñâ');
            await stopRecordingByUser();
            return;
        }

        // ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
        const currentState = WS_VIDEO_STATE_UTILS?.getCurrentState();
        if (!currentState?.allowRecording) {
            showInfoMessage(`ÌòÑÏû¨ ÏÉÅÌÉúÏóêÏÑúÎäî ÎÖπÌôîÌï† Ïàò ÏóÜÏäµÎãàÎã§: ${currentState?.display || 'Ïïå Ïàò ÏóÜÏùå'}`);
            return;
        }

        // Í∂åÌïú ÌôïÏù∏
        if (!WS_VIDEO_STATE.cameraPermissionGranted) {
            showInfoMessage('ÎÖπÌôîÌïòÎ†§Î©¥ Ïπ¥Î©îÎùº Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§');
            showPermissionModal();
            return;
        }

        // ÎÖπÌôî Î≤ÑÌäº Ï¶âÏãú ÎπÑÌôúÏÑ±Ìôî
        if (domCache.recordBtn) {
            domCache.recordBtn.disabled = true;
            domCache.recordBtn.classList.add('disabled');
        }

        WS_VIDEO_LOGGER.info('üî¥ ÎÖπÌôî ÏãúÏûë ÏöîÏ≤≠');
        await startRecordingDirectly();

    } catch (error) {
        WS_VIDEO_LOGGER.error('ÎÖπÌôî ÌÜ†Í∏Ä Ïò§Î•ò:', error);
        showErrorMessage('ÎÖπÌôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§');

        // Ïò§Î•ò Ïãú Î≤ÑÌäº ÏÉÅÌÉú Î≥µÏõê
        if (domCache.recordBtn) {
            domCache.recordBtn.disabled = false;
            domCache.recordBtn.classList.remove('disabled');
        }

        // ÎÖπÌôî ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        if (wsVideoRecordingManager) {
            wsVideoRecordingManager.resetRecordingState();
        }
    }
};

window.stopRecordingByUser = async function() {
    try {
        WS_VIDEO_LOGGER.info('üõë ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÖπÌôî Ï§ëÏßÄ ÏöîÏ≤≠ - ÏóÖÎ°úÎìú ÏßÑÌñâ');

        // üîß ÏÇ¨Ïö©Ïûê Ï§ëÏßÄÎèÑ forceStopRecording Ìò∏Ï∂úÌïòÏó¨ ÏóÖÎ°úÎìú ÏßÑÌñâ
        if (wsVideoRecordingManager && wsVideoRecordingManager.isRecording) {
            wsVideoRecordingManager.forceStopRecording('USER_STOP');
        }

        // üîß UIÎäî forceStopRecordingÏóêÏÑú Ïù¥ÎØ∏ ÏóÖÎç∞Ïù¥Ìä∏Îê®
        WS_VIDEO_LOGGER.info('‚úÖ ÏÇ¨Ïö©Ïûê ÎÖπÌôî Ï§ëÏßÄ ÏôÑÎ£å - ÏóÖÎ°úÎìú ÏßÑÌñâ Ï§ë');

    } catch (error) {
        WS_VIDEO_LOGGER.error('ÏÇ¨Ïö©Ïûê ÎÖπÌôî Ï§ëÏßÄ Ï§ë Ïò§Î•ò:', error);
        showErrorMessage('ÎÖπÌôî Ï§ëÏßÄ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§');
    }
};



window.requestPermissions = async function() {
    hidePermissionModal();

    try {
        const granted = await wsVideoPermissionManager?.requestPermissions();
        if (granted) {
            setupCamera();
            // üîß Í∂åÌïú ÌöçÎìù ÌõÑ Î™®Îã¨ Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            showCallStartModal();
        }
    } catch (error) {
        WS_VIDEO_LOGGER.error('Í∂åÌïú ÏöîÏ≤≠ Ïã§Ìå®', error);
    }
};

window.denyPermission = function() {
    hidePermissionModal();
    updateStatus('Í∂åÌïú ÏóÜÏù¥ Ï≤¥Ìóò');
    showInfoMessage('Ï≤¥Ìóò Î™®ÎìúÎ°ú Ïã§ÌñâÎê©ÎãàÎã§');
    initializeWithoutPermission();
};

window.cancelCall = function() {
    hideCallStartModal();
    const memberId = WS_VIDEO_STATE.memberId || '1';
    const memorialId = WS_VIDEO_STATE.memorialId || '1';
    window.location.href = `/memorial/${memorialId}?memberId=${memberId}`;
};

window.startCall = async function() {
    hideCallStartModal();

    try {
        WS_VIDEO_LOGGER.info('üìû ÌÜµÌôî ÏãúÏûë - ÏÇ¨Ïö©Ïûê Ïï°ÏÖòÏúºÎ°ú ÏòÅÏÉÅ Ï¥àÍ∏∞Ìôî');

        // üîß ÌïµÏã¨: ÏÇ¨Ïö©Ïûê ÌÅ¥Î¶≠ ÏßÅÌõÑ Ï¶âÏãú ÏòÅÏÉÅ Ïû¨ÏÉù (Ïï°ÏÖò Î≥¥Ïû•!)
        const videoSuccess = await wsVideoUIManager.transitionVideo(
            WS_VIDEO_STATE.waitingVideoUrl,
            true,   // loop
            true    // unmuted - ÏÜåÎ¶¨ ÌôúÏÑ±Ìôî!
        );

        if (!videoSuccess) {
            throw new Error('ÎåÄÍ∏∞ÏòÅÏÉÅ Ïû¨ÏÉù Ïã§Ìå®');
        }

        WS_VIDEO_LOGGER.info('‚úÖ ÏÇ¨Ïö©Ïûê Ïï°ÏÖòÏúºÎ°ú ÏòÅÏÉÅ Ïû¨ÏÉù ÏÑ±Í≥µ');

        // Ïù¥Ï†ú ÏÑ∏ÏÖò ÏÉùÏÑ±
        if (typeof startVideoCallSession === 'function') {
            await startVideoCallSession();
        }

    } catch (error) {
        WS_VIDEO_LOGGER.error('ÌÜµÌôî ÏãúÏûë Ïã§Ìå®', error);
        showErrorMessage('ÌÜµÌôî ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§');

        // Ïã§Ìå® Ïãú Î™®Îã¨ Îã§Ïãú ÌëúÏãú
        setTimeout(() => showCallStartModal(), 1000);
    }
};

window.startCallWithoutPermission = async function() {
    hideCallStartModal();

    try {
        WS_VIDEO_LOGGER.info('üìû Ï≤¥Ìóò Î™®Îìú ÌÜµÌôî ÏãúÏûë');

        // üîß ÏÇ¨Ïö©Ïûê Ïï°ÏÖòÏúºÎ°ú Ï≤¥Ìóò Î™®Îìú ÏòÅÏÉÅ Ïû¨ÏÉù
        const videoSuccess = await wsVideoUIManager.transitionVideo(
            WS_VIDEO_CONFIG?.DEFAULT_WAITING_VIDEO || WS_VIDEO_STATE.waitingVideoUrl,
            true,   // loop
            true    // unmuted
        );

        if (videoSuccess) {
            updateStatus('Ï≤¥Ìóò Î™®Îìú - Ïó∞Í≤∞Îê®');
            WS_VIDEO_LOGGER.info('‚úÖ Ï≤¥Ìóò Î™®Îìú ÏòÅÏÉÅ Ïû¨ÏÉù ÏÑ±Í≥µ');
        } else {
            WS_VIDEO_LOGGER.warn('‚ö†Ô∏è Ï≤¥Ìóò Î™®Îìú ÏòÅÏÉÅ Ïû¨ÏÉù Ïã§Ìå®');
            updateStatus('Ï≤¥Ìóò Î™®Îìú - ÏòÅÏÉÅ ÏóÜÏùå');
        }

    } catch (error) {
        WS_VIDEO_LOGGER.error('Ï≤¥Ìóò Î™®Îìú ÏãúÏûë Ïã§Ìå®', error);
        showErrorMessage('Ï≤¥Ìóò Î™®Îìú ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§');
    }
};

function updateCallStartModal() {
    const startButton = document.querySelector('.call-start-btn.start');
    if (startButton && !WS_VIDEO_STATE.cameraPermissionGranted) {
        startButton.onclick = startCallWithoutPermission;
        startButton.textContent = 'Ï≤¥Ìóò Î™®ÎìúÎ°ú ÏãúÏûë';
        startButton.style.background = '#f39c12'; // Ï≤¥Ìóò Î™®Îìú ÏÉâÏÉÅ
    } else {
        startButton.onclick = startCall;
        startButton.textContent = 'ÌÜµÌôî ÏãúÏûëÌïòÍ∏∞';
        startButton.style.background = '#27ae60'; // Ï†ïÏÉÅ Î™®Îìú ÏÉâÏÉÅ
    }
}

window.endCall = function() {
    if (confirm('ÏòÅÏÉÅÌÜµÌôîÎ•º Ï¢ÖÎ£åÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
        if (WS_VIDEO_STATE.isRecording) {
            stopRecording();
        }

        if (typeof cleanup === 'function') {
            cleanup();
        }

        const memberId = WS_VIDEO_STATE.memberId || '1';
        const memorialId = WS_VIDEO_STATE.memorialId || '1';
        window.location.href = `/call/feedback?memberId=${memberId}&memorialId=${memorialId}`;
    }
};

window.goBack = function() {

    // ÎÖπÌôî Ï§ëÏù¥Î©¥ Î®ºÏ†Ä Ï§ëÏßÄ
    if (WS_VIDEO_STATE.isRecording) {
        if (confirm('ÎÖπÌôîÍ∞Ä ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§. Ï†ïÎßê ÎÇòÍ∞ÄÏãúÍ≤†ÏäµÎãàÍπå?')) {
            stopRecording();
        } else {
            return;
        }
    }

    const memberId = WS_VIDEO_STATE.memberId || '1';
    const memorialId = WS_VIDEO_STATE.memorialId || '1';
    window.location.href = `/memorial/${memorialId}?memberId=${memberId}`;
};

// ========== Í∂åÌïú ÏóÜÏù¥ Ï¥àÍ∏∞Ìôî ==========
window.initializeWithoutPermission = async function() {
    updateStatus('Ï≤¥Ìóò Î™®Îìú');

    // üîß Î≥ÄÍ≤Ω: ÏòÅÏÉÅ Ïû¨ÏÉù Ï†úÍ±∞, Î™®Îã¨Îßå ÌëúÏãú
    setTimeout(() => {
        showCallStartModal();
        showInfoMessage('Ï≤¥Ìóò Î™®ÎìúÎ°ú Ïã§ÌñâÎê©ÎãàÎã§.\nÎÖπÌôî Í∏∞Îä•ÏùÄ Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
    }, 1000);
};

// ========== ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ (Í∞ÑÏÜåÌôî) ==========
document.addEventListener('keydown', function(event) {
    if (wsVideoUIManager.openModals.length > 0) return;

    switch (event.code) {
        case 'Space':
            event.preventDefault();
            toggleRecording();
            break;
        case 'Escape':
            event.preventDefault();
            if (WS_VIDEO_STATE.isRecording) {
                stopRecordingByUser(); // ÎÖπÌôî Ï§ëÏù¥Î©¥ Ï§ëÏßÄ
            } else {
                endCall(); // ÏïÑÎãàÎ©¥ ÌÜµÌôî Ï¢ÖÎ£å
            }
            break;
    }
});

// ========== ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏ ÏµúÏ†ÅÌôî ==========
if ('ontouchstart' in window) {
    let lastTouchEnd = 0;
    document.addEventListener('touchend', function(event) {
        const now = Date.now();
        if (now - lastTouchEnd <= 300) {
            event.preventDefault();
        }
        lastTouchEnd = now;
    }, false);

    document.addEventListener('touchmove', function(event) {
        event.preventDefault();
    }, { passive: false });
}

WS_VIDEO_LOGGER.info('Í∞ÑÏÜåÌôîÎêú UI Í¥ÄÎ¶¨Ïûê Î°úÎìú ÏôÑÎ£å');