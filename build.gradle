plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.11-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.tomato'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	// ============= WEB CORE =============
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// ============= DATABASE =============
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// ============= API 문서화 =============
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

	// ============= QueryDSL =============
    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	// ============= LOGGING =============
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	// ============= SECURITY & JWT =============
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// ============= 파일 처리 =================
	implementation 'commons-io:commons-io:2.16.1'
	implementation 'commons-net:commons-net:3.8.0'

	// ============= AI 서비스 연동 =============
    // OpenAI GPT API
    implementation 'com.theokanning.openai-gpt3-java:service:0.18.2'
    // Google Speech-to-Text
    implementation 'com.google.cloud:google-cloud-speech:4.40.0'
    // Azure Cognitive Services (Text-to-Speech)
    implementation 'com.microsoft.cognitiveservices.speech:client-sdk:1.38.0'

	// ============= SMS/이메일 발송 =============
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // SMS 발송 (예: 네이버 클라우드 플랫폼)
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'

	// ============= 미디어 처리 =============
    // FFmpeg Java wrapper (영상 처리)
    implementation 'net.bramp.ffmpeg:ffmpeg:0.8.0'
    // 이미지 처리
    implementation 'org.imgscalr:imgscalr-lib:4.2'

	// ============= WebRTC 지원 =============
    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// ============= 캐싱 =============
    implementation 'org.springframework.boot:spring-boot-starter-cache'
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // ============= JSON 처리 =============
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // ============= 유틸리티 =============
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // ============= 개발 도구 =============
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // ============= 테스트 =============
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def generated = layout.buildDirectory.dir("generated/querydsl")

sourceSets {
	main {
		java {
			srcDirs += generated.get().asFile
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorGeneratedSourcesDirectory = generated.get().asFile
}

tasks.named('test') {
	enabled = false
}
